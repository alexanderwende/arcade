!function(t){var e={};function n(s){if(e[s])return e[s].exports;var o=e[s]={i:s,l:!1,exports:{}};return t[s].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(s,o,function(e){return t[e]}.bind(null,o));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var s=class{constructor(t){this._systems=[],this._entities=[],this._collidables=[]}addSystem(t){this._systems.push(t)}removeSystem(t){let e=this._systems.indexOf(t);e>-1&&this._systems.splice(e,1)}addEntity(t){this._entities[t.id]=t,t.components.collision&&this._collidables.push(t)}removeEntity(t){this._entities.splice(t.id,1),t.components.collision&&this._collidables.splice(this._collidables.indexOf(t),1)}getCollisionCandidates(t){return this._collidables.filter(function(e){return e!==t})}update(){this._systems.forEach(function(t){t.update(this._entities,this)}.bind(this))}};class o{constructor(t){this.id=o.createUniqueId(),this.components={}}addComponent(t){return this.components[t.constructor.id]=t,this}getComponent(t){return this.components[t]}removeComponent(t){return delete this.components[t.constructor.id],this}destroy(){}static createUniqueId(){return this._count++}}o._count=0;var i=o;const a=Math.PI,r=2*a;class d{constructor(t,e){void 0===e&&"object"==typeof t?(this.x=void 0!==t.x?t.x:0,this.y=void 0!==t.y?t.y:0):(this.x=void 0!==t?t:0,this.y=void 0!==e?e:0)}add(...t){for(let e=0,n=t.length;e<n;e++)this.x+=t[e].x,this.y+=t[e].y;return this}subtract(...t){for(let e=0,n=t.length;e<n;e++)this.x-=t[e].x,this.y-=t[e].y;return this}multiply(...t){for(let e=0,n=t.length;e<n;e++)this.x*=t[e].x,this.y*=t[e].y;return this}dotProduct(t){return this.x*t.x+this.y*t.y}crossProduct(t){return"number"==typeof t?new this.constructor(t*this.y,-t*this.x):"object"==typeof t?this.x*t.y-this.y*t.x:void 0}scale(t){return this.x*=t,this.y*=t,this}length(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}orientation(){return Math.acos(this.x/this.length())*(this.y<0?-1:1)}rotate(t){(t%=r)>a?t=-r+t:t<-a&&(t=r+t);let e=Math.cos(t),n=Math.sin(t),s=this.x*e-this.y*n,o=this.x*n+this.y*e;return this.x=s,this.y=o,this}normalize(){let t=this.length();return this.x/=t,this.y/=t,this}clone(){return new this.constructor(this.x,this.y)}static add(...t){let e=t[0].x,n=t[0].y;for(let s=1,o=t.length;s<o;s++)e+=t[s].x,n+=t[s].y;return new this(e,n)}static subtract(...t){let e=t[0].x,n=t[0].y;for(let s=1,o=t.length;s<o;s++)e-=t[s].x,n-=t[s].y;return new this(e,n)}static multiply(...t){let e=t[0].x,n=t[0].y;for(let s=1,o=t.length;s<o;s++)e*=t[s].x,n*=t[s].y;return new this(e,n)}static dotProduct(t,e){return t.x*e.x+t.y*e.y}static crossProduct(t,e){if("object"==typeof t){if("object"==typeof e)return t.x*e.y-t.y*e.x;if("number"==typeof e)return new this(e*t.y,-e*t.x)}else if("number"==typeof t&&"object"==typeof e)return new this(-t*e.y,t*e.x)}static scale(t,e){return new this({x:t.x*e,y:t.y*e})}static magnitude(t){return Math.sqrt(Math.pow(t.x,2)+Math.pow(t.y,2))}static distance(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}static normalize(t){let e=d.length(t);return new this(t.x/e,t.y/e)}static clamp(t,e,n){let s=Math.max(Math.min(t.x,n.x),e.x),o=Math.max(Math.min(t.y,n.y),e.y);return new d(s,o)}}var c=d;class h extends c{constructor(t,e){super(t,e),this.previous={x:this.x,y:this.y}}}h.id="position";var p=h;class l extends c{constructor(t,e){super(t,e)}}l.id="velocity";var m=l;class u{constructor(t){this.gravityScale=void 0!==t.gravityScale?t.gravityScale:1}}u.id="gravity";var y=u;class w extends c{constructor(t,e){super(t,e)}}w.id="force";var v=w;class C{constructor(t){this.mass="object"==typeof t?void 0!==t.mass?t.mass:1:void 0!==t?t:1,this.inverseMass=0===this.mass?0:1/this.mass}}C.id="mass";var x=C;class f{constructor(t){switch(this.type=void 0!==t.type?t.type:f.TYPE.RECT,this.type){case f.TYPE.RECT:case f.TYPE.TRIANGLE:this.width=void 0!==t.width?t.width:0,this.height=void 0!==t.height?t.height:0;break;case f.TYPE.CIRCLE:this.radius=void 0!==t.radius?t.radius:0}}}f.id="shape",f.TYPE={RECT:1,CIRCLE:2,TRIANGLE:3};var g=f;class E{constructor(t){this.restitution=t.restitution,this.density=t.density,this.type=t.type}getStaticFriction(t){return this.constructor.FRICTION[this.type][t.type].STATIC}getKineticFriction(t){return this.constructor.FRICTION[this.type][t.type].KINETIC}static getStaticFriction(t,e){return this.FRICTION[t.type][e.type].STATIC}static getDynamicFriction(t,e){return this.FRICTION[t.type][e.type].KINETIC}static getRestitution(t,e){return Math.min(t.restitution,e.restitution)}}E.id="material",E.TYPE={STEEL:"STEEL",WOOD:"WOOD",RUBBER:"RUBBER",GLASS:"GLASS",CONCRETE:"CONCRETE"},E.FRICTION={STEEL:{STEEL:{STATIC:.78,KINETIC:.42}},WOOD:{WOOD:{STATIC:.5,KINETIC:.2},CONCRETE:{STATIC:.62}},RUBBER:{CONCRETE:{STATIC:1,KINETIC:.8}},GLASS:{GLASS:{STATIC:.94,KINETIC:.4}}};var T=E;class b{constructor(t){this.keys=t&&t.keys||{}}}b.id="input";var I=b;class S{constructor(t){this.shape=t.shape}}S.id="collision";var M=S;class B{constructor(t){this._states={},this._keyDownHandler=this._onKeyDown.bind(this),this._keyUpHandler=this._onKeyUp.bind(this),this.start()}_onKeyDown(t){t.preventDefault(),this._states[t.keyCode]=!0}_onKeyUp(t){t.preventDefault(),this._states[t.keyCode]=!1}isPressed(t){return this._states[t]}start(){window.addEventListener("keydown",this._keyDownHandler,!1),window.addEventListener("keyup",this._keyUpHandler,!1)}stop(){window.removeEventListener("keydown",this._keyDownHandler,!1),window.removeEventListener("keyup",this._keyUpHandler,!1)}update(t,e){var n,s;for(n=0,s=t.length;n<s;n++){let s=t[n],o=s.components.input;if(o)for(let t in o.keys)this.isPressed(t)&&o.keys[t](s,e)}}}B.KEYS={LEFT:37,UP:38,RIGHT:39,DOWN:40,SPACE:32,ENTER:13};var A=B;var P=class{constructor(t){this.timeStep=void 0!==t.timeStep?t.timeStep:1/60,this.gravity=void 0!==t.gravity?t.gravity:{x:0,y:9.81}}update(t,e){for(var n=0,s=t.length;n<s;n++){let e=t[n],s=e.components.position,o=e.components.velocity,i=e.components.gravity,a=e.components.force,r=new c(0,0),d=e.components.mass?e.components.mass.mass:0,h=e.components.mass?e.components.mass.inverseMass:0;s&&(s.previous.x=s.x,s.previous.y=s.y),0!==d&&(i&&r.add(c.scale(this.gravity,i.gravityScale).scale(d)),a&&(r.add(a),a.x=0,a.y=0)),this.integrateSymplecticAverage(s,o,r,h,this.timeStep)}}integrateSymplectic(t,e,n,s,o){e.add(c.scale(n,s).scale(o)),t.add(c.scale(e,o))}integrateSymplecticAverage(t,e,n,s,o){let i=c.scale(n,s).scale(o);t.add(c.add(e,i.scale(.5)).scale(o)),e.add(i)}};var R=class{constructor(t){this.positionCorrectionFactor=void 0!==t.positionCorrectionFactor?t.positionCorrectionFactor:.2,this.positionCorrectionThreshold=void 0!==t.positionCorrectionThreshold?t.positionCorrectionThreshold:.01}update(t,e){var n=[];for(let s of t)if(s.components.collision){let t=e.getCollisionCandidates(s);for(let e of t){let t={a:s,b:e};this.checkCollision(s,e,t)&&n.push(t)}}for(let t of n)this.resolveCollision(t),this.correctPosition(t)}checkCollision(t,e,n){var s=this.getBoundingShape(t),o=this.getBoundingShape(e),i=this.getCollisionAlgorithm(s,o);return!!i&&i(s,o,n)}getBoundingShape(t){var e=t.components.position,n=t.components.orientation,s=t.components.collision.shape;switch(s.type){case g.TYPE.RECT:return n?this.getOBB(e,n,s):this.getAABB(e,s);case g.TYPE.CIRCLE:return this.getBC(e,s)}}getCollisionAlgorithm(t,e){return this[t.type+"vs"+e.type].bind(this)||void 0}getAABB(t,e){var n=t.clone();return n.extend=new c({x:e.width/2,y:e.height/2}),n.min=new c({x:t.x-n.extend.x,y:t.y-n.extend.y}),n.max=new c({x:t.x+n.extend.x,y:t.y+n.extend.y}),n.type="AABB",n}getOBB(t,e,n){var s=t.clone();return s.extend=new c({x:n.width/2,y:n.height/2}),s.min=new c({x:t.x-s.extend.x,y:t.y-s.extend.y}),s.max=new c({x:t.x+s.extend.x,y:t.y+s.extend.y}),s.type="OBB",s}getBC(t,e){var n=t.clone();return n.radius=e.radius,n.type="BC",n}AABBvsAABB(t,e,n){var s=c.subtract(e,t),o=t.extend.x+e.extend.x-Math.abs(s.x);if(o>=0){var i=t.extend.y+e.extend.y-Math.abs(s.y);if(i>=0)return o<=i?(s.x<0?n.normal=new c({x:-1,y:0}):n.normal=new c({x:1,y:0}),n.penetration=o):(s.y<0?n.normal=new c({x:0,y:-1}):n.normal=new c({x:0,y:1}),n.penetration=i),!0}return!1}BCvsBC(t,e,n){var s=c.subtract(e,t),o=t.radius+e.radius,i=Math.pow(s.x,2)+Math.pow(s.y,2);return i<=Math.pow(o,2)&&(0!==(i=Math.sqrt(i))?(n.penetration=o-i,n.normal=s.scale(1/i)):(n.penetration=t.radius,n.normal=new c({x:1,y:0})),!0)}AABBvsBC(t,e,n){var s=c.subtract(e,t),o=c.clamp(s,c.scale(t.extend,-1),t.extend),i=c.subtract(s,o),a=e.radius,r=Math.pow(i.x,2)+Math.pow(i.y,2);return r<=Math.pow(a,2)&&(r=Math.sqrt(r),n.normal=i.scale(1/r),n.penetration=a-r,!0)}BCvsAABB(t,e,n){var s=this.AABBvsBC(e,t,n);return s&&n.normal.scale(-1),s}resolveCollision(t){var e=t.a,n=t.b,s=e.components.velocity,o=n.components.velocity,i=e.components.material,a=n.components.material,r=e.components.mass,d=n.components.mass,h=c.subtract(o,s),p=c.dotProduct(h,t.normal);if(!(p>0)){var l=T.getRestitution(i,a),m=r.inverseMass+d.inverseMass,u=-(1+l)*p/m,y=c.scale(t.normal,u);s.subtract(c.scale(y,r.inverseMass)),o.add(c.scale(y,d.inverseMass));var w=new c(-t.normal.y,t.normal.x);if(0!==(p=h.dotProduct(w))){p<0&&w.scale(-1);var v,C=(p<0?p:-p)/m,x=T.getStaticFriction(i,a),f=T.getDynamicFriction(i,a);v=Math.abs(C)<u*x?c.scale(w,C):c.scale(w,-u*f),s.subtract(c.scale(v,r.inverseMass)),o.add(c.scale(v,d.inverseMass))}}}correctPosition(t){var e=t.penetration-this.positionCorrectionThreshold;if(e>0){let n=t.a,s=t.b,o=e/(n.components.mass.inverseMass+s.components.mass.inverseMass)*this.positionCorrectionFactor,i=c.scale(t.normal,o);n.components.position.subtract(c.scale(i,n.components.mass.inverseMass)),s.components.position.add(c.scale(i,s.components.mass.inverseMass))}}};const _=2*Math.PI;Math.PI,Math.PI;var O=class{constructor(t){this.context=t.context,this.viewport={width:this.context.canvas.width,height:this.context.canvas.height,x:0,y:0,scaleX:20,scaleY:20},this.isEmpty=!0,this.enableBuffering=t.enableBuffering||!0,this.enableAntialias=t.enableAntialias||!0,this.enableSmoothing=t.enableSmoothing||!0}update(t,e){var n,s;for(this.context.clearRect(0,0,this.viewport.width,this.viewport.height),this.context.globalAlpha=1,this.context.fillStyle="#000",this.context.strokeStyle="#000",this.context.lineWidth=1,n=0,s=t.length;n<s;n++){let e=t[n];e.components.position&&e.components.shape?this.renderShape(this.context,e.components.position,e.components.shape):e.components.position&&e.components.sprite}}renderShape(t,e,n){switch(t.save(),t.transform(1,0,0,1,e.x*this.viewport.scaleX,e.y*this.viewport.scaleY),n.type){case g.TYPE.RECT:let s=n.width*this.viewport.scaleX,o=n.height*this.viewport.scaleY;t.fillRect(-s/2,-o/2,s,o);break;case g.TYPE.CIRCLE:let i=n.radius*this.viewport.scaleX;t.beginPath(),t.arc(0,0,i,0,_),t.fill();break;case g.TYPE.TRIANGLE:let a=n.width*this.viewport.scaleX/2,r=n.height*this.viewport.scaleY/2;t.beginPath(),t.moveTo(0,-r),t.lineTo(-a,r),t.lineTo(a,r),t.lineTo(0,-r),t.fill()}t.restore()}};!function(t){var e=document.getElementById("game"),n=document.createElement("canvas");n.width=e.clientWidth,n.height=e.clientHeight,e.appendChild(n);var o,a,r,d=new s({width:40,height:30});d.addSystem(new A({})),d.addSystem(new P({})),d.addSystem(new R({})),d.addSystem(new O({context:n.getContext("2d")})),o=new g({type:g.TYPE.CIRCLE,radius:1}),a=new T({restitution:.5,density:1,type:T.TYPE.WOOD}),r=(new i).addComponent(new p({x:4,y:3})).addComponent(new m({x:2,y:0})).addComponent(new y({})).addComponent(new M({shape:o})).addComponent(new x({mass:1})).addComponent(a).addComponent(o),d.addEntity(r),o=new g({type:g.TYPE.RECT,width:1.5,height:1.5}),r=(new i).addComponent(new p({x:6.5,y:3})).addComponent(new m({x:0,y:0})).addComponent(new y({})).addComponent(new M({shape:o})).addComponent(new x({mass:.5})).addComponent(a).addComponent(o),d.addEntity(r),r=(new i).addComponent(new p({x:8,y:20})).addComponent(new m({x:0,y:0})).addComponent(new M({shape:o})).addComponent(new x({mass:0})).addComponent(a).addComponent(o),d.addEntity(r),o=new g({type:g.TYPE.CIRCLE,radius:1}),r=(new i).addComponent(new p({x:10,y:10})).addComponent(new m({x:0,y:0})).addComponent(new v({})).addComponent(new M({shape:o})).addComponent(new x({mass:2})).addComponent(new I({keys:{37:function(t,e){t.components.force.x-=20},38:function(t,e){t.components.force.y-=20},39:function(t,e){t.components.force.x+=20},40:function(t,e){t.components.force.y+=20}}})).addComponent(a).addComponent(o),d.addEntity(r),o=new g({type:g.TYPE.RECT,width:38,height:1}),r=(new i).addComponent(new p(20,29)).addComponent(new m(0,0)).addComponent(new x(0)).addComponent(a).addComponent(o).addComponent(new M({shape:o})),d.addEntity(r),r=(new i).addComponent(new p(20,1)).addComponent(new m(0,0)).addComponent(new x(0)).addComponent(a).addComponent(o).addComponent(new M({shape:o})),d.addEntity(r),o=new g({type:g.TYPE.RECT,width:1,height:25}),r=(new i).addComponent(new p(1,15)).addComponent(new m(0,0)).addComponent(new x(0)).addComponent(a).addComponent(o).addComponent(new M({shape:o})),d.addEntity(r),r=(new i).addComponent(new p(39,15)).addComponent(new m(0,0)).addComponent(new x(0)).addComponent(a).addComponent(o).addComponent(new M({shape:o})),d.addEntity(r),t.world=d;var c={requestId:0,time:0,delta:0,accumulator:0,step:1e3/60,start:function(){this.requestId=t.requestAnimationFrame(this.loop.bind(this))},pause:function(){t.cancelAnimationFrame(this.requestId)},stop:function(){t.cancelAnimationFrame(this.requestId)},step:function(){d.update()},loop:function(e){d.update(),this.requestId=t.requestAnimationFrame(this.loop.bind(this))}},h=document.getElementById("start"),l=document.getElementById("pause"),u=document.getElementById("step"),w=document.getElementById("stop"),C=document.getElementById("smoothing");h.addEventListener("click",function(){c.start()},!1),l.addEventListener("click",function(){c.pause()},!1),u.addEventListener("click",function(){c.step()},!1),w.addEventListener("click",function(){c.stop()},!1),C.addEventListener("change",function(){c.enableSmoothing=C.checked},!1)}(window)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,